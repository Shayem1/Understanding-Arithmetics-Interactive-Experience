import tkinter as tk
from tkinter import *
import customtkinter
import math
from tkinter import ttk, messagebox                                                                         #Importing packages that are required for the program to run
from PIL import Image, ImageTk
import googletrans
import textblob
import time
import os

def Program():
    global fullscreen
    def close_app():
        root.destroy()

    def switch_screen():
        global fullscreen
        if fullscreen == False:
            root.attributes("-fullscreen", True)
            fullscreen = True
        else:
            root.attributes("-fullscreen", False)
            fullscreen = False

    root = customtkinter.CTk()
    root.title("Understanding Arithmetics: Interactive Experience")                            #Title of the program
    root.geometry("1280x720")                                                                  #The size of the program (startup)
    root.minsize(width=1280, height=720)                                                         #minimum resolution for the program
    root.iconbitmap("images\program_icon.ico")                                                  #icon of the program
    fullscreen = False
    

    def scaler(event):                                                                    #scales the background image in the begining to the size of the screen
        new_width = event.width                                                              #Gets information about window
        newx_multi = new_width/1920                                                            #scales objects to the x-axis
        new_height = event.height                   
        newy_multi = new_height/1080                                                            #scales objects to the y-axis
        avg_multi = (newx_multi+newy_multi)/2                                                     #scales objects to the average of x and y axis (for non-aspect ratio resolutions)

        image = copy_of_image.resize((new_width,new_height))                                       #resizes image
        photo = ImageTk.PhotoImage(image)
        background.config(image = photo)                                                              #configures/updates the background image
        background.image = photo                                                                     #Deletes old images --> increases efficiency

        start_menu_frame.place(x=newx_multi*720,y =newy_multi*600)
        start_button.configure(font=("Comic Sans MS Bold",50*avg_multi)) 
        options_button.configure(font=("Comic Sans MS Bold",50*avg_multi))
        exit_button.configure(font=("Comic Sans MS Bold",50*newx_multi))
        start_button.pack(padx=20*newx_multi, pady = newy_multi*20,fill=BOTH, expand = YES)
        options_button.pack(padx=20*newx_multi,fill=BOTH, expand = YES)
        exit_button.pack(padx=20*newx_multi, pady = newy_multi*20,fill=BOTH, expand = YES)                             

    image = Image.open("images\Learn_Arithmetic.png")                                           #opens the image file
    copy_of_image = image.copy()                                                                #creates a copy of the image file
    photo = ImageTk.PhotoImage(image)
    background = Label(root, image = photo)                                                          #Assigns the image to the label
    background.bind("<Configure>", scaler)                                                     #Configures the image to the screen
    background.pack(fill=BOTH, expand = YES)                                                         #packs the label onto the GUI

    start_menu_frame = customtkinter.CTkFrame(master=root, border_width=5, corner_radius=30, bg_color="white", fg_color="light grey", border_color="grey")
    start_menu_frame.place(x=720, y = 600)                                                      #Frame in the start_menu




    start_button = customtkinter.CTkButton(start_menu_frame, text = start, font=("Comic Sans MS Bold",50), text_color="#453735", fg_color="#BDBDBD", corner_radius=25, hover_color="#E3E3E3")
    start_button.pack(padx=20, pady = 20,fill=BOTH, expand = YES)

    options_button = customtkinter.CTkButton(start_menu_frame, text = options, font=("Comic Sans MS Bold",50), text_color="#453735", fg_color="#BDBDBD", corner_radius=25, hover_color="#E3E3E3", command=switch_screen)
    options_button.pack(padx=20,fill=BOTH, expand = YES)

    exit_button = customtkinter.CTkButton(start_menu_frame, text = exit, font=("Comic Sans MS Bold",50), text_color="#453735", fg_color="#BDBDBD", corner_radius=25, hover_color="#E3E3E3", command= close_app)
    exit_button.pack(padx=20, pady = 20,fill=BOTH, expand = YES)

    icon = Image.open("images\images.png")
    copy_of_icon = icon.copy()
    icon_button = Button(root, image=icon)
    icon_button.place(x=50, y=50)




    languages=googletrans.LANGUAGES                                                     #Obtains languages from google translate
    language_list=list(languages.values())

    original_combo=ttk.Combobox(root,width=20,value=language_list)                    #Creating Comboboxes for languages
    original_combo.current(21)
    
    translated_combo=customtkinter.CTkComboBox(root, values=language_list)
    translated_combo.set("english")                                                     #Setting default language to english
    translated_combo.place(x= 500, y = 300)

    
                                          
    def translate():
        try:                                                                                #Getting the languages from the dictionary Keys
            for key, value in languages.items():                                            #Get the "From Language" key
                if (value == original_combo.get()):
                    from_language_key=key
            for key,value in languages.items():                                             #Get the "To Language" key
                if (value ==translated_combo.get()):
                    to_language_key=key
            
            if translated_combo.get() == "english":                                         #English can't be translated to english
                '''example.configure(text = "example text in english")'''                         #Translating to english will set it to defualt text
                start = "start"
                options = "OPTIONS"
                exit = "EXIT"


        

            if translated_combo.get() != "english":                                         #Runs this if the selected language was not english
                
                '''example = (textblob.TextBlob("example text in english").translate(from_lang=from_language_key, to=to_language_key))'''
                start = (textblob.TextBlob("START").translate(from_lang=from_language_key, to=to_language_key))
                options = (textblob.TextBlob("OPTIONS").translate(from_lang=from_language_key, to=to_language_key))
                exit = (textblob.TextBlob("EXIT").translate(from_lang=from_language_key, to=to_language_key))
               
                
                
            for j in range(0,int(len(languages.values()))):                                 #Translating to selected language
                if language_list[j]==translated_combo.get():
                    original_combo.current(j)
            
        except Exception as e:
            messagebox.showerror("Translator",e)

        start_button.configure(text=start)
        options_button.configure(text=options)
        exit_button.configure(text=exit)


    translate = customtkinter.CTkButton(root,text="Translate", command=translate)
    translate.place(x=500, y= 200)

    root.mainloop()


#configurations of the program
start = "START"
options = "OPTIONS"
exit = "EXIT"



Program()
